import { text_example_style } from '../temp/text/example';
import { task_base } from '../task_base';
import bot from '../../unity/bot';
import sever from '../../unity/sever';
import { DNA_CN, DNA_Leve } from '../../shared/game/body';
/**
 * Á†¥Â£ÅËÆ°Âàí
 */
export class challenge_box extends task_base {
    constructor(...a) {
        super(...a);
        this.render();
    }
    async render() {
        if (this.content == this.matchKey) {
            this.menu();
            return
        }
        let isStart = this.content.replace(this.matchKey, '') == 'ÂºÄÂêØ';
        let isChallenge = this.content.replace(this.matchKey, '') == 'ÊåëÊàò';

        let type = 0;
        if (isStart) {
            type = 1
        }
        if (isChallenge) {
            type = 2
        }

        if (!type) {
            this.menu();
            return
        }
        
        let req = await sever.callApi('battle/Challenge_box', { userId: this.userId, type: type });
        if (!req.isSucc) {
            this.sendErr(req.err)
            return;
        }
        let data = req.res;

        if (data.battle) {
            let battleLog = ['', ''];
            let battleList = data.battle.log
            for (let index = 0; index < battleList.length; index++) {
                const item = battleList[index];
                let itemLog = ''
                itemLog += 'üßô' + item.name;
                for (let index = 0; index < item.list.length; index++) {
                    const free_skill = item.list[index];
                    itemLog += `‚îÇ‚ñå${free_skill.name}:${free_skill.val}`
                }
                itemLog += '\n';

                battleLog[item.group] += itemLog;

            }
            let battleConfig = {
                hurtLog: {
                    me: true,
                    enemy: true
                },
                killLog: {
                    open: true,
                }
            }


            if (battleConfig.hurtLog.me) {
                let hurtLog = '';
                hurtLog += `üî•Ôø£Ôø£Ôø£Ôø£ÔººüìÑ‰º§ÂÆ≥ÁªüËÆ°ÔºèÔø£Ôø£Ôø£Ôø£üî•\n`;
                hurtLog += `${battleLog[0]}`;
                await bot.sendText(this.channel_id, hurtLog)
            }
            if (battleConfig.hurtLog.enemy) {
                let hurtLog = '';
                hurtLog += `üî•Ôø£Ôø£Ôø£Ôø£ÔººüíåÊïåÊñπÁªüËÆ°ÔºèÔø£Ôø£Ôø£Ôø£üî•\n`;
                hurtLog += `${battleLog[1]}`;
                await bot.sendText(this.channel_id, hurtLog)
            }

            if (battleConfig.killLog.open) {
                let killLog = '';
                killLog += `Ôø£Ôø£Ôø£Ôø£Ôø£ÔººüßôÊàòÊñóËøáÁ®ãÔºèÔø£Ôø£Ôø£Ôø£\n`;
                killLog += `üßö‚Äç‚ôÇÔ∏èÊú¨Ê¨°ÊàòÊñóÂÖ±${data.battle.battleRound}ÂõûÂêà\n`

                for (let index = 0; index < data.battle.kill_log.length; index++) {
                    const kill_item = data.battle.kill_log[index];
                    killLog += `${kill_item.round}ÂõûÂêà:${kill_item.body.name}ÂáªÊùÄ‰∫Ü${kill_item.die_body.name}\n`
                }
                await bot.sendText(this.channel_id, killLog)
            }

        }
    }

    async menu() {
        let req = await sever.callApi('battle/Challenge_box', { userId: this.userId, type: 0 });
        if (!req.isSucc) {
            this.sendErr(req.err)
            return;
        }
        let data = req.res;

        let temp = `‚îè‚îÑ‚ïê‚ïê‚ö†Ô∏èÁ†¥Â£ÅËÆ°Âàí‚ïê‚ïê‚îÅ‚îÑ\n`;
        temp += `‚¨õÂΩìÂÖ®ÊúçÂÆûÂäõË∂≥Â§ü‰πãÂêéÔºåÊâÄÊúâËΩÆÂõûËÄÖÈÉΩÂ∞Ü‰∏ÄÂêåÂèÇ‰∏é[Á†¥Â£ÅËÆ°Âàí]ÊëßÊØÅÁõíÂ≠êÁöÑÈöúÁ¢çÔºåÂéªÊåëÊàòÁõíÂ≠êÂ§ñÁöÑÊïå‰∫∫„ÄÇÁ†¥Â£ÅËÆ°ÂàíÂá†‰πéÂøÖÈ°ªÈúÄË¶Å[${DNA_CN[DNA_Leve[data.openlimit]]}]Á∫ßÂà´‰ª•‰∏äÊâçËÉΩÂºÄÂ±ï\n`
        temp += `üåàÊåëÊàòËÉúÂà©üî∫${data.win}\n`
        temp += `üíÄÊåëÊàòÂ§±Ë¥•üîª${data.fail}\n`
        temp += `‚¨õ‰ªéÂºÄÂßãËÆ°ÂàíËã•1Â§©ÂÜÖÊ≤°‰∫∫ÊåëÊàòÂàôËßÜ‰∏∫Â§±Ë¥•\n`
        temp += `‚îó‚îÑ‚îÅ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îÅ‚îÑ`
        await bot.sendText(this.channel_id, temp);
        let tips = `‚îè@${bot.getBot_name()},ËæìÂÖ•‰ª•‰∏ãÊåá‰ª§‚îÑ
‚ñ∂Ô∏èÂºÄÂêØÊåá‰ª§ÔºöÂºÄÂêØ${this.matchKey}
‚ñ∂Ô∏èÊåëÊàòÊåá‰ª§ÔºöÊåëÊàò${this.matchKey}
‚îó‚îÑ‚îÅ${this.at()}‚îÅ‚îÑ`
        bot.sendText(this.channel_id, tips);
    }
}